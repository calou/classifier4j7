<?xml version="1.0"?>
<document>
  <properties>
    <author email="nicklothian at users dot sourceforge dot net">Nick Lothian</author>
    <title>Classifier4J</title>
  </properties>
  <meta name="keyword" content="java, Bayesian"/>
<body>
	<section name="Using Classifier4J">
		<p>The basic usage model for Classifer4J is as follows
			<ol>
				<li>Create an instance of an implementation of the <tt>IClassifer</tt> interface.</li>
				<li>Call either <tt>isMatch(String)</tt> (for boolean matching) or <tt>classifiy(String)</tt> (to get a match rating)</li>
			</ol>
		</p>

		<subsection name="Basic usage">
			<p>The simplest example possible is:
				<source>
	SimpleClassifier classifier = new SimpleClassifier();
	classifier.setSearchWord( "java" );
	String sentance = "This is a sentance about java";
	System.out.println( "The string " + sentance +
		" contains the word java:" + classifier.isMatch(sentance) );
				</source>
			The <tt>SimpleClassifier</tt> class is an implementation of <tt>IClassifer</tt> which
			looks in the string passed to it for the word which was set using <tt>setSearchWord(String)</tt>.
			For real world usage, it isn't very useful, but can be used for testing.
			</p>
		</subsection>

		<subsection name="Using BayesianClassifier">
			<p>The <tt><a href="subprojects/core/apidocs/net/sf/classifier4J/bayesian/BayesianClassifier.html">BayesianClassifier</a></tt> is an
			implementation of the <tt><a href="subprojects/core/apidocs/net/sf/classifier4J/IClassifier.html">IClassifier</a></tt> interface which uses Bayes' theorem
			to rate the text against a known input.
			<source>
	IWordsDataSource wds = new SimpleWordsDataSource();
	IClassifier classifier = new BayesianClassifier(wds);
	System.out.println( "Matches = " + classifier.classify("This is a sentence") );
			</source>
			</p>
			<p>Some applications will find the <tt><a href="subprojects/core/apidocs/net/sf/classifier4J/bayesian/JDBCWordsDataSource.html">JDBCWordsDataSource</a></tt>
			more useful than the SimpleWordsDataSource. This can be used almost as simply:
			<source>
	DriverMangerJDBCConnectionManager cm = new DriverMangerJDBCConnectionManager(<i>JDBCConnectionString</i>, <i>username</i>, <i>password</i>);
	JDBCWordsDataSource wds = new JDBCWordsDataSource(cm);
	IClassifier classifier = new BayesianClassifier(wds);
	...
			</source>
			</p>
			<p>However, the performance of the JDBCWordsDataSource is quite bad. If performance is a concern then the
			JDBMWordsDataSource (in the Classifier4J-Optional download) may be a better option.</p>

			<p>The Bayesian Classifier can be trained using the teachMatch and teachNonMatch methods. Note that it
			must be trained with both matches and non matches for the alogrithm to work.</p>
		</subsection>

        <subsection name="Using VectorClassifier">
            <p>The VectorClassifier is an implementation of IClassifier that uses the <a href="http://www.perl.com/pub/a/2003/02/19/engine.html">vector
            space search</a> algorithm. This algorithm is quite fast (compared to the Bayesian algorithm) and does not
            require training of non-matches. It also has the advantage that its match ratings (as returned by ther classify
            method) are fairly well distriubuted unlike the Bayesian Classifier which tended to return 0.99 or 0.01. This
            characteristic makes it ideally suited for categorization type tasks.
            </p>
            <p>Sample code:
            <source>
    TermVectorStorage storage = new HashMapTermVectorStorage();
    VectorClassifier vc = new VectorClassifier(storage);

    vc.teachMatch("category", "hello there is this a long sentence yes it is blah blah hello.");
    double result = vc.classify("category", "hello blah");
    System.out.println(result);

            </source>
            </p>
            <p>Currently it has the disadvantage that once trained it is impossible to incrementally add more training
            to a category.</p>
        </subsection>

		<subsection name="Using ISummariser">
			<p>Using the ISummarier is very simple. Give it some input, and decide how many sentances you'd like the summary to be.
			<source>
	String input = "Classifier4J is a java package for working with text. Classifier4J includes a summariser. A Summariser allows the summary of text. A Summariser is really cool. I don't think there are any other java summarisers.";
	String result = summariser.summarise(input, 2);
	System.out.println(result);
			</source>
			will output	<tt>Classifier4J is a java package for working with text. Classifier4J includes a summariser.</tt>.
			That would be kind of boring, except that
			<source>
	...
	String result = summariser.summarise(input, 1);
	...
			</source>
			will output	<tt>Classifier4J includes a summariser.</tt>
			</p>
		</subsection>

	</section>
</body>
</document>
